// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  //url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  url = "postgres://default:uTfXUQ9ex2Pd@ep-spring-surf-00840264-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb"
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Issue {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String   @db.Text
  status      Status   @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id        Int      @id @default(autoincrement())
  title     String
  price     Int
  category  ProductCategory
  imgUrl    String
  details   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        Int   @id @default(autoincrement())
  createdAt DateTime @default(now())
  price     Int
  products  Json[]
  status    OrderStatus   @default(Being_Prepared)
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String
  address   Json[]
}

// set of constant values
enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum OrderStatus {
  Being_Prepared
  Delivered
  Cancelled
}

enum ProductCategory {
  Laptop
  Tablet
  Phone
  Other
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
